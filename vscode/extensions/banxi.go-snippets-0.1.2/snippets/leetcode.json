{
  "absi": {
    "description": "abs for int",
    "prefix": "absi",
    "body": [
      "func abs(num int) int {",
      "\tif num < 0 {",
      "\t\treturn -num",
      "\t}",
      "\treturn num",
      "}"
    ],
    "scope": "go"
  },
  "maxi": {
    "description": "max for int",
    "prefix": "maxi",
    "body": [
      "func max(a, b int) int {",
      "\tif a > b {",
      "\t\treturn a",
      "\t}",
      "\treturn b",
      "}"
    ],
    "scope": "go"
  },
  "mini": {
    "description": "min for int",
    "prefix": "mini",
    "body": [
      "func mini(a, b int) int {",
      "\tif a < b {",
      "\t\treturn a",
      "\t}",
      "\treturn b",
      "}"
    ],
    "scope": "go"
  },
  "sumi": {
    "description": "sum for ints",
    "prefix": "sumi",
    "body": [
      "func sum(nums []int) int {",
      "\ts := 0",
      "\tfor _, num := range nums {",
      "\t\ts += num",
      "\t}",
      "\treturn s",
      "}"
    ],
    "scope": "go"
  },
  "avgi": {
    "description": "avg for ints",
    "prefix": "avgi",
    "body": [
      "func avg(nums []int) float64 {",
      "\ts := 0",
      "\tfor _, num := range nums {",
      "\t\ts += num",
      "\t}",
      "\treturn float64(s) / float64(len(nums))",
      "}"
    ],
    "scope": "go"
  },
  "maxints": {
    "description": "max for ints",
    "prefix": "maxints",
    "body": [
      "func maxInts(nums ...int) int {",
      "\tmaxNum := -int(^uint(0)>>1) - 1",
      "\tfor _, num := range nums {",
      "\t\tif num > maxNum {",
      "\t\t\tmaxNum = num",
      "\t\t}",
      "\t}",
      "\treturn maxNum",
      "}"
    ],
    "scope": "go"
  },
  "joinints": {
    "description": "join ints to string",
    "prefix": "joinints",
    "body": [
      "import (",
      "\t\"strconv\"",
      "\t\"strings\"",
      ")",
      "func joinNums(arr []int, sep string) string {",
      "\tnumCount := len(arr)",
      "\tif numCount == 0 {",
      "\t\treturn \"\"",
      "\t}",
      "\tstrs := make([]string, numCount)",
      "\tfor i := 0; i < numCount; i++ {",
      "\t\tstrs[i] = strconv.Itoa(arr[i])",
      "\t}",
      "\treturn strings.Join(strs, sep)",
      "}"
    ],
    "scope": "go"
  },
  "limits": {
    "description": "MaxInt and MinInt",
    "prefix": "limits",
    "body": [
      "const (",
      "\tMaxInt = int(^uint(0) >> 1)",
      "\tMinInt = -MaxInt - 1",
      ")"
    ],
    "scope": "go"
  },
  "treenode": {
    "description": "type TreeNode struct",
    "prefix": "treenode",
    "body": [
      "type TreeNode struct {",
      "\tVal   int",
      "\tLeft  *TreeNode",
      "\tRight *TreeNode",
      "}"
    ],
    "scope": "go"
  },
  "dumptree": {
    "description": "Dump Tree using level order",
    "prefix": "dumptree",
    "body": [
      "import \"fmt\"",
      "func dumpTree(root *TreeNode) {",
      "\tif root == nil {",
      "\t\tfmt.Println(\"nil\")",
      "\t\treturn",
      "\t}",
      "\tbranches := []*TreeNode{root}",
      "\tfmt.Print(\"[\")",
      "\tfor len(branches) > 0 {",
      "\t\tbranch := branches[0]",
      "\t\tbranches = branches[1:]",
      "\t\tif branch.Left != nil {",
      "\t\t\tbranches = append(branches, branch.Left)",
      "\t\t}",
      "\t\tif branch.Right != nil {",
      "\t\t\tbranches = append(branches, branch.Right)",
      "\t\t}",
      "\t\tif len(branches) > 0 {",
      "\t\t\tfmt.Print(branch.Val, \",\")",
      "\t\t} else {",
      "\t\t\tfmt.Print(branch.Val, \"\")",
      "\t\t}",
      "\t}",
      "\tfmt.Println(\"]\")",
      "}"
    ],
    "scope": "go"
  },
  "listnode": {
    "description": "type ListNode struct",
    "prefix": "listnode",
    "body": [
      "type ListNode struct {",
      "\tVal  int",
      "\tNext *ListNode",
      "}"
    ],
    "scope": "go"
  },
  "dumplistnode": {
    "description": "Dump ListNode using level order",
    "prefix": "dumplistnode",
    "body": [
      "import \"fmt\"",
      "func dumpListNode(lnode *ListNode) {",
      "\tfmt.Print(\"ListNode[\")",
      "\tfor lnode != nil {",
      "\t\tfmt.Print(lnode.Val, \",\")",
      "\t\tlnode = lnode.Next",
      "\t}",
      "\tfmt.Print(\"]\\n\")",
      "}"
    ],
    "scope": "go"
  },
  "reversearr": {
    "description": "Reverse Ints Array",
    "prefix": "reversearr",
    "body": [
      "func reverseArray(nums []int) {",
      "\tfor i, j := 0, len(nums)-1; i < j; i, j = i+1, j-1 {",
      "\t\ttmp := nums[i]",
      "\t\tnums[i] = nums[j]",
      "\t\tnums[j] = tmp",
      "\t}",
      "}"
    ],
    "scope": "go"
  },
  "reversestr": {
    "description": "Reverse String",
    "prefix": "reversestr",
    "body": [
      "func reverseString(s string) string {",
      "\tbytes := []byte(s)",
      "\tfor i, j := 0, len(bytes)-1; i < j; i, j = i+1, j-1 {",
      "\t\ttmp := bytes[i]",
      "\t\tbytes[i] = bytes[j]",
      "\t\tbytes[j] = tmp",
      "\t}",
      "\treturn string(bytes)",
      "}"
    ],
    "scope": "go"
  },
  "pbasic": {
    "description": "Basic file for problem",
    "prefix": "pbasic",
    "body": [
      "package main",
      "import (",
      "\t\"fmt\"",
      ")",
      "func main() {",
      "\tfmt.Println(\"Hello World\")",
      "}"
    ],
    "scope": "go"
  },
  "pbinarytree": {
    "description": "Binary Tree solution file stub",
    "prefix": "pbinarytree",
    "body": [
      "package main",
      "import (",
      "\t\"fmt\"",
      ")",
      "type TreeNode struct {",
      "\tVal   int",
      "\tLeft  *TreeNode",
      "\tRight *TreeNode",
      "}",
      "func levelOrderDump(root *TreeNode) {",
      "\tif root == nil {",
      "\t\treturn",
      "\t}",
      "\tlevelStacks := []*TreeNode{root}",
      "\tfor len(levelStacks) > 0 {",
      "\t\tbranch := levelStacks[0]",
      "\t\tlevelStacks = levelStacks[1:]",
      "\t\tfmt.Print(branch.Val, \",\")",
      "\t\tleft := branch.Left",
      "\t\tright := branch.Right",
      "\t\tif left != nil {",
      "\t\t\tlevelStacks = append(levelStacks, left)",
      "\t\t}",
      "\t\tif right != nil {",
      "\t\t\tlevelStacks = append(levelStacks, right)",
      "\t\t}",
      "\t}",
      "\tfmt.Println(\"\")",
      "}",
      "func main() {",
      "\troot := &TreeNode{Val: 4}",
      "\troot.Left = &TreeNode{Val: 2}",
      "\troot.Left.Left = &TreeNode{Val: 1}",
      "\troot.Left.Right = &TreeNode{Val: 3}",
      "\troot.Right = &TreeNode{Val: 7}",
      "\troot.Right.Left = &TreeNode{Val: 6}",
      "\troot.Right.Right = &TreeNode{Val: 9}",
      "\tlevelOrderDump(root)",
      "}"
    ],
    "scope": "go"
  },
  "p1darr": {
    "description": "One Dimen Array Basic file stub",
    "prefix": "p1darr",
    "body": [
      "package main",
      "import (",
      "\t\"fmt\"",
      ")",
      "func $1(nums []int) int {",
      "}",
      "func main() {",
      "\tfmt.Println(\"3 -> \", $2([]int{1, 1, 0, 1, 1, 1}))",
      "}"
    ],
    "scope": "go"
  },
  "p2darr": {
    "description": "One Dimen Array Basic file stub",
    "prefix": "p2darr",
    "body": [
      "package main",
      "import (",
      "\t\"fmt\"",
      ")",
      "func main() {",
      "\tarrA := [][]int{",
      "\t\t{1, 1, 0},",
      "\t\t{0, 1, 0},",
      "\t\t{0, 1, 0},",
      "\t}",
      "\tarrB := [][]int{",
      "\t\t{0, 0, 0},",
      "\t\t{0, 1, 1},",
      "\t\t{0, 0, 1},",
      "\t}",
      "\tfmt.Println(\"3 -> \")",
      "\tarrA2 := [][]int{",
      "\t\t{0, 1},",
      "\t\t{1, 1},",
      "\t}",
      "\tarrB2 := [][]int{",
      "\t\t{1, 1},",
      "\t\t{1, 0},",
      "\t}",
      "\tfmt.Println(\"2 -> \")",
      "}"
    ],
    "scope": "go"
  }
}